/*
Given a string A, find if there is any subsequence that repeats itself.

A subsequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters.

NOTE : sub-sequence length should be greater than or equal to 2.



Input Format:

The first and the only argument of input contains a string A.
Output Format:

Return an integer, 0 or 1:
    => 0 : False
    => 1 : True
Constraints:

1 <= length(A) <= 100
Examples:

Input 1:
    A = "abab"

Output 1:
    1

Explanation 1:
    "ab" is repeated.

Input 2:
    A = "abba"
    
Output 2:
    0

Explanation 2:
    There is no repeating subsequence.
Seen this question in a real interview before
*/
int Solution::anytwo(string A) {
    
    int size = A.size() , dp[size + 1][size + 1] , i , j ;
    for( i = 0 ; i <= size ; i++ )
    {
        for( j = 0 ; j <= size ; j++ )
        {
            if( i == 0 || j == 0 )
                dp[i][j] = 0 ;
            else
            {
                if(A[i - 1] == A[j -1] && i -1 != j - 1)
                    dp[i][j] = dp[i - 1][j - 1] + 1 ;
                else
                    dp[i][j] = max( dp[i-1][j] , dp[i][j-1] ) ;
            }
        }
    }
    return dp[size][size] >= 2 ? 1 : 0 ;
}
