/*
Given preorder and inorder traversal of a tree, construct the binary tree.

 Note: You may assume that duplicates do not exist in the tree. 
Example :

Input :
        Preorder : [1, 2, 3]
        Inorder  : [2, 1, 3]

Return :
            1
           / \
          2   3

Seen this question in a real interview before*/
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
TreeNode* bt_construct(vector<int> &A, vector<int> &B, int low, int high, int* preindex)
{
    int mid;
    if(low > high)
        return NULL;
    TreeNode* node = new TreeNode(A[*preindex]);
    (*preindex)++;
    //if(low == high)
     //   return node;
    for(int i = low; i <= high; i++)
    {
        if(B[i] == node->val)
        {
            mid = i;
            break;
        }
    }
    node->left = bt_construct(A, B, low, mid-1, preindex);
    node->right = bt_construct(A, B, mid+1, high, preindex);
    return node;
}
TreeNode* Solution::buildTree(vector<int> &A, vector<int> &B) {
    int preindex = 0, low = 0, high = A.size()-1;
    TreeNode* result= bt_construct(A, B, low, high, &preindex);
    return result;
}

