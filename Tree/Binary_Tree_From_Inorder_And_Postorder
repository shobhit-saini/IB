/*
Given inorder and postorder traversal of a tree, construct the binary tree.

 Note: You may assume that duplicates do not exist in the tree. 
Example :

Input : 
        Inorder : [2, 1, 3]
        Postorder : [2, 3, 1]

Return : 
            1
           / \
          2   3

Seen this question in a real interview before
*/
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
TreeNode* BT_construct(vector<int> &A, vector<int> &B, int low, int high, int* postindex)
{
    int mid;
    if(low > high)
        return NULL;
    TreeNode* node = new TreeNode(B[*postindex]);
    (*postindex)--;
    for(int i = low; i <= high; i++)
    {
        if(node->val == A[i])
        {
            mid = i;
            break;
        }
    }
    node->right = BT_construct(A, B, mid+1, high, postindex);
    node->left = BT_construct(A, B, low, mid-1, postindex);
   
    return node;
}
TreeNode* Solution::buildTree(vector<int> &A, vector<int> &B) {
    int low = 0, high = A.size()-1, postindex = B.size()-1;
    TreeNode* result = BT_construct(A,B,low,high,&postindex);
    return result;
}
