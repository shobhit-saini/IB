/*
Find the contiguous subarray within an array, A of length N which has the largest sum.

Input Format:

The first and the only argument contains an integer array, A.
Output Format:

Return an integer representing the maximum possible sum of the contiguous subarray.
*/
int Solution::maxSubArray(const vector<int> &A) {
    int size = A.size(), i;
    int max_so_far = A[0];
    int curr_max = A[0];
    for(i = 1; i < size; i++)
    {
        curr_max = (curr_max + A[i] > A[i])? (curr_max + A[i]) : A[i];
        max_so_far = (max_so_far > curr_max)? max_so_far : curr_max;
    }
    return max_so_far;
}
